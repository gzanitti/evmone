#include "secp256k1.hpp"

namespace evmmax::secp256k1
{
// Computes z = 1/x (mod p) and returns it.
uint256 inv(const ModArith<uint256>& s, const uint256& x) noexcept
{
    uint256 z;
    // Inversion computation is derived from the addition chain:
    //
    // _10     = 2*1
    // _100    = 2*_10
    // _101    = 1 + _100
    // _111    = _10 + _101
    // _1110   = 2*_111
    // _111000 = _1110 << 2
    // _111111 = _111 + _111000
    // i13     = _111111 << 4 + _1110
    // x12     = i13 << 2 + _111
    // x22     = x12 << 10 + i13 + 1
    // i29     = 2*x22
    // i31     = i29 << 2
    // i54     = i31 << 22 + i31
    // i122    = (i54 << 20 + i29) << 46 + i54
    // x223    = i122 << 110 + i122 + _111
    // i269    = ((x223 << 23 + x22) << 7 + _101) << 3
    // return    _101 + i269
    //
    // Operations: 255 squares 15 multiplies
    //
    // Generated by github.com/mmcloughlin/addchain v0.4.0.

    // Allocate Temporaries.
    uint256 t0;
    uint256 t1;
    uint256 t2;
    uint256 t3;
    uint256 t4;
    // Step 1: t0 = x^0x2
    t0 = s.mul(x, x);

    // Step 2: z = x^0x4
    z = s.mul(t0, t0);

    // Step 3: z = x^0x5
    z = s.mul(x, z);

    // Step 4: t1 = x^0x7
    t1 = s.mul(t0, z);

    // Step 5: t0 = x^0xe
    t0 = s.mul(t1, t1);

    // Step 7: t2 = x^0x38
    t2 = s.mul(t0, t0);
    for (int i = 1; i < 2; ++i)
        t2 = s.mul(t2, t2);

    // Step 8: t2 = x^0x3f
    t2 = s.mul(t1, t2);

    // Step 12: t2 = x^0x3f0
    for (int i = 0; i < 4; ++i)
        t2 = s.mul(t2, t2);

    // Step 13: t0 = x^0x3fe
    t0 = s.mul(t0, t2);

    // Step 15: t2 = x^0xff8
    t2 = s.mul(t0, t0);
    for (int i = 1; i < 2; ++i)
        t2 = s.mul(t2, t2);

    // Step 16: t2 = x^0xfff
    t2 = s.mul(t1, t2);

    // Step 26: t2 = x^0x3ffc00
    for (int i = 0; i < 10; ++i)
        t2 = s.mul(t2, t2);

    // Step 27: t0 = x^0x3ffffe
    t0 = s.mul(t0, t2);

    // Step 28: t0 = x^0x3fffff
    t0 = s.mul(x, t0);

    // Step 29: t3 = x^0x7ffffe
    t3 = s.mul(t0, t0);

    // Step 31: t2 = x^0x1fffff8
    t2 = s.mul(t3, t3);
    for (int i = 1; i < 2; ++i)
        t2 = s.mul(t2, t2);

    // Step 53: t4 = x^0x7ffffe000000
    t4 = s.mul(t2, t2);
    for (int i = 1; i < 22; ++i)
        t4 = s.mul(t4, t4);

    // Step 54: t2 = x^0x7ffffffffff8
    t2 = s.mul(t2, t4);

    // Step 74: t4 = x^0x7ffffffffff800000
    t4 = s.mul(t2, t2);
    for (int i = 1; i < 20; ++i)
        t4 = s.mul(t4, t4);

    // Step 75: t3 = x^0x7fffffffffffffffe
    t3 = s.mul(t3, t4);

    // Step 121: t3 = x^0x1ffffffffffffffff800000000000
    for (int i = 0; i < 46; ++i)
        t3 = s.mul(t3, t3);

    // Step 122: t2 = x^0x1fffffffffffffffffffffffffff8
    t2 = s.mul(t2, t3);

    // Step 232: t3 = x^0x7ffffffffffffffffffffffffffe0000000000000000000000000000
    t3 = s.mul(t2, t2);
    for (int i = 1; i < 110; ++i)
        t3 = s.mul(t3, t3);

    // Step 233: t2 = x^0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffff8
    t2 = s.mul(t2, t3);

    // Step 234: t1 = x^0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffff
    t1 = s.mul(t1, t2);

    // Step 257: t1 = x^0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffff800000
    for (int i = 0; i < 23; ++i)
        t1 = s.mul(t1, t1);

    // Step 258: t0 = x^0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff
    t0 = s.mul(t0, t1);

    // Step 265: t0 = x^0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffff80
    for (int i = 0; i < 7; ++i)
        t0 = s.mul(t0, t0);

    // Step 266: t0 = x^0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffff85
    t0 = s.mul(z, t0);

    // Step 269: t0 = x^0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc28
    for (int i = 0; i < 3; ++i)
        t0 = s.mul(t0, t0);

    // Step 270: z = x^0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2d
    z = s.mul(z, t0);

    return z;
}
}  // namespace evmmax::secp256k1
